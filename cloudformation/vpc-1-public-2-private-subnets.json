{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This script creates a VPC environment for AWS OpsWorks. The stack contains 3 subnets: the first subnet is public and contains the load balancer, a NAT device for internet access from the private subnet. The second and third subnets are private. Two private subnets are required to support RDS.",
  "Parameters": {
    "NATInstanceType": {
      "Description": "NAT Device EC2 instance type",
      "Type": "String",
      "Default": "t1.micro",
      "AllowedValues": [
        "t1.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "AZPrimary": {
      "Description": "The primary availability zone",
      "Type": "String",
      "Default": "us-east-1b",
      "AllowedValues": [
        "us-east-1b",
        "us-east-1c",
        "us-east-1d"
      ],
      "ConstraintDescription": "must be a valid availability zone."
    },
    "AZAlternate": {
      "Description": "The alternate availability zone",
      "Type": "String",
      "Default": "us-east-1c",
      "AllowedValues": [
        "us-east-1b",
        "us-east-1c",
        "us-east-1d"
      ],
      "ConstraintDescription": "must be a valid availability zone."
    },
    "Env": {
      "Description": "Environment",
      "Type": "String",
      "Default": "Dev",
      "ConstraintDescription": "must be a valid string."
    },
    "VPCName": {
      "Description": "Name of the VPC",
      "Type": "String",
      "Default": "VPC-Dev-1",
      "ConstraintDescription": "must be a valid string."
    },
    "VPCCIDR": {
      "Description": "Address range of CIDR",
      "Type": "String",
      "Default": "192.168.0.0/16",
      "ConstraintDescription": "Must be a valid address range (e.g. 10.0.0.0/16)"
    },
    "PublicCIDR": {
      "Description": "Address range of CIDR",
      "Type": "String",
      "Default": "192.168.1.0/24",
      "ConstraintDescription": "Must be a valid address range (e.g. 10.0.0.0/16)"
    },
    "PrivateCIDR1": {
      "Description": "Address range of CIDR",
      "Type": "String",
      "Default": "192.168.2.0/24",
      "ConstraintDescription": "Must be a valid address range (e.g. 10.0.0.0/16)"
    },
    "PrivateCIDR2": {
      "Description": "Address range of CIDR",
      "Type": "String",
      "Default": "192.168.3.0/24",
      "ConstraintDescription": "Must be a valid address range (e.g. 10.0.0.0/16)"
    }
  },
  "Mappings": {
    "AWSNATAMI": {
      "us-east-1": {
        "AMI": "ami-c6699baf"
      },
      "us-west-2": {
        "AMI": "ami-52ff7262"
      },
      "us-west-1": {
        "AMI": "ami-3bcc9e7e"
      },
      "eu-west-1": {
        "AMI": "ami-0b5b6c7f"
      },
      "ap-southeast-1": {
        "AMI": "ami-02eb9350"
      },
      "ap-southeast-2": {
        "AMI": "ami-ab990e91"
      },
      "ap-northeast-1": {
        "AMI": "ami-14d86d15"
      },
      "sa-east-1": {
        "AMI": "ami-0439e619"
      }
    },
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "64"
      },
      "m1.small": {
        "Arch": "64"
      },
      "m1.medium": {
        "Arch": "64"
      },
      "m1.large": {
        "Arch": "64"
      },
      "m1.xlarge": {
        "Arch": "64"
      },
      "m2.xlarge": {
        "Arch": "64"
      },
      "m2.2xlarge": {
        "Arch": "64"
      },
      "m2.4xlarge": {
        "Arch": "64"
      },
      "c1.medium": {
        "Arch": "64"
      },
      "c1.xlarge": {
        "Arch": "64"
      },
      "cc1.4xlarge": {
        "Arch": "64Cluster"
      },
      "cc2.8xlarge": {
        "Arch": "64Cluster"
      },
      "cg1.4xlarge": {
        "Arch": "64GPU"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCIDR"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCName"
            }
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Ref": "AZPrimary"},
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicCIDR"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCName"
                  },
                  "Public"
                ]
              ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCName"
            }
          }
        ]
      }
    },
    "GatewayToInternet": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCName"
            }
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Public"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCName"
            }
          }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundEmphemeralPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      }
    },
    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Ref": "AZPrimary"},
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateCIDR1"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": "Private"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCName"
                  },
                  "Private1"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateRouteTable1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCName"
            }
          }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        }
      }
    },
    "PrivateRoute1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },
    "PrivateNetworkAcl1": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCName"
            }
          }
        ]
      }
    },
    "InboundPrivateNetworkAclEntry1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl1"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutBoundPrivateNetworkAclEntry1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl1"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociation1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl1"
        }
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Ref": "AZAlternate"},
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PrivateCIDR2"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": "Private"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCName"
                  },
                  "Private2"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateRouteTable2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCName"
            }
          }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        }
      }
    },
    "PrivateRoute2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable2"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },
    "PrivateNetworkAcl2": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Network",
            "Value": "Private"
          },
          {
            "Key": "Env",
            "Value": {
              "Ref": "Env"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Ref": "VPCName"
            }
          }
        ]
      }
    },
    "InboundPrivateNetworkAclEntry2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl2"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutBoundPrivateNetworkAclEntry2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl2"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociation2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet2"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl2"
        }
      }
    },
    "NATIPAddress": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },
    "NATDevice": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "NATInstanceType"
        },
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSNATAMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "NATSecurityGroup"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "NAT Device"
          }
        ]
      }
    },
    "NATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": { "Ref": "VPCCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9418",
            "ToPort": "9418",
            "CidrIp": { "Ref": "VPCCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": { "Ref": "VPCCIDR" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "20",
            "ToPort": "22",
            "CidrIp": { "Ref": "VPCCIDR" }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9418",
            "ToPort": "9418",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "20",
            "ToPort": "21",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  },
  "Outputs": {
    "VPC": {
      "Description": "VPC",
      "Value": {
        "Ref": "VPC"
      }
    },
    "PublicSubnet": {
      "Description": "Public Subnet",
      "Value": {
        "Ref": "PublicSubnet"
      }
    },
    "PrivateSubnet1": {
      "Description": "Private Subnet1",
      "Value": {
        "Ref": "PrivateSubnet1"
      }
    },
    "PrivateSubnet2": {
      "Description": "Private Subnet2",
      "Value": {
        "Ref": "PrivateSubnet2"
      }
    }
  }
}