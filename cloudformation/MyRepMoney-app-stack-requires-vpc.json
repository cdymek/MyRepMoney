{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation MyRepMoney/vpc_website_setup.json: This script creates a new instance of the MyRepMoney environment using a combination of EC2 and RDS.  The website downloads an archive of the website contents from S3 and creates a new mysql RDS database.  It also creates and assigns a new Elastic IP address to the EC2 server.",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "Default": "cdymekcom"
    },
    "OperatorEmail": {
      "Description": "Email address to notify if there are any scaling operations",
      "Type": "String",
      "Default": "aws@cdymek.com"
    },
    "DataLoaderInstanceType": {
      "Description": "Job Control Server EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",                    
        "hs1.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."   
    }, 
    "JCSInstanceType": {
      "Description": "Job Control Server EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "g2.2xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",                    
        "hs1.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
   "VPCId": {
      "Description": " The id of the VPC in which the application will be set up",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "25",
      "ConstraintDescription": "must be a valid VPC id"
    },
    "PublicSubnet": {
      "Description": " The id of the subnet that will host the publically accessible EC2 server running the JCS",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "25",
      "ConstraintDescription": "must be a valid subnet id"
    },
   "PublicSubnetAZ": {
      "Description": " The AZ of the subnet that will host the publically accessible EC2 server running the JCS",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "25",
      "ConstraintDescription": "must be a valid subnet id"
    },    
    "SubnetId1": {
      "Description": " The id of a subnet that may host the database and any DataLoader EC2 server instances",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "25",
      "ConstraintDescription": "must be a valid subnet id"
    },
    "SubnetId2": {
      "Description": " The id of a subnet that may host the database and any DataLoader EC2 server instances",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "25",
      "ConstraintDescription": "must be a valid Subnet."
    },
    "SubnetAZList": {
      "Description": "The list of AZs associated with the subnets",
      "Type": "CommaDelimitedList",
      "ConstraintDescription": "must be a valid Subnet."
    },
    "BucketName": {
      "Description": " The name of the s3 bucket that contains the configuration information ",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "100",
      "Default": "cdymekbackup",
      "ConstraintDescription": "must be a valid subnet id"
    },
    "DBClass": {
      "Default": "db.t2.micro",
      "Description": "Database instance class",
      "Type": "String",
      "AllowedValues": [
        "db.t2.micro",
        "db.m1.small",
        "db.m1.large",
        "db.m1.xlarge",
        "db.m2.xlarge",
        "db.m2.2xlarge",
        "db.m2.4xlarge"
      ],
      "ConstraintDescription": "must select a valid database instance type."
    },
    "DBName": {
      "Default": "MyRepMoney",
      "Description": "The database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBUsername": {
      "Default": "root",
      "Description": "The MySQl database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "Default": "genS1tTjOIP0FR",
      "NoEcho": "true",
      "Description": "The MySQL database admin account password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DBAllocatedStorage": {
      "Default": "5",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 5 and 1024Gb."
    },
    "DBFile": {
      "Default": "MyRepMoney-Test.sql",
      "Description": "Name of the database SQL file to load from / backup to in S3.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DBFileLoad": {
      "Default": "Y",
      "Description": "Flag to indicate whether to load the DBFile specified. Y=Yes, any other value=N",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "1",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "RecipeURL": {
      "Default": "https://s3.amazonaws.com/cdymekbackup/MyRepMoney/chef.tar.gz",
      "Description": "Name of the recipe archive file to load.  Leave blank for no content to be loaded. ",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "500",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "SQSQueueName": {
      "Default": "MyRepMoneyJCSQueue",
      "Description": "Name of the SQS Queue used to exchange messages from the JCS server to the DataLoader servers.",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "50",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DNSHostedZone": {
      "Description": "The name of the hosted zone in Route53 that any DNS entries will belong to.",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "25",
      "Default": "Z2WJ34K0USS5CR"
    },
    "DNSDomainList" : {
      "Description": "The list of domain names to be updated in Route 53, separated by commas.",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "250",
      "Default": ""
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the publically accessible EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "64HVM"
      },
      "t2.small": {
        "Arch": "64HVM"
      },
      "t2.medium": {
        "Arch": "64HVM"
      },
      "m3.medium": {
        "Arch": "64HVM"
      },      
      "m3.large": {
        "Arch": "64HVM"
      },
      "m3.xlarge": {
        "Arch": "64HVM"
      },
      "m3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.large": {
        "Arch": "64HVM"
      },
      "c3.xlarge": {
        "Arch": "64HVM"
      },
      "c3.2xlarge": {
        "Arch": "64HVM"
      },
      "c3.4xlarge": {
        "Arch": "64HVM"
      },
      "c3.8xlarge": {
        "Arch": "64HVM"
      },
      "g2.2xlarge": {
        "Arch": "64HVM"
      },
      "r3.large": {
        "Arch": "64HVM"
      },
      "r3.xlarge": {
        "Arch": "64HVM"
      },
      "r3.2xlarge": {
        "Arch": "64HVM"
      },
      "r3.4xlarge": {
        "Arch": "64HVM"
      },
      "r3.8xlarge": {
        "Arch": "64HVM"
      },
      "i2.xlarge": {
        "Arch": "64HVM"
      },
      "i2.2xlarge": {
        "Arch": "64HVM"
      },
      "i2.4xlarge": {
        "Arch": "64HVM"
      },
      "i2.8xlarge": {
        "Arch": "64HVM"
      },
      "hs1.8xlarge": {
        "Arch": "64HVM"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "32": "NOT_SUPPORTED",
        "64": "NOT_SUPPORTED",
        "64HVM": "ami-864d84ee"
      }
    }
  },
  "Resources": {
    "CfnUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStackResource",
                    "s3:GetObject",
                    "s3:GetObjectTorrent",
                    "s3:GetObjectVersion",
                    "s3:GetObjectVersionTorrent",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:PutObjectVersionAcl",
                    "route53:ChangeResourceRecordSets",
                    "route53:GetChange",
                    "route53:GetHostedZone",
                    "route53:ListHostedZones",
                    "route53:ListResourceRecordSets",
                    "sqs:ChangeMessageVisibility",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                    "sqs:GetQueueUrl",
                    "sqs:ReceiveMessage",
                    "sqs:SendMessage"                    
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "HostKeys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "CfnUser"
        }
      }
    },
    "LogRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LogRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*",
                    "s3:GetObject"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*",
                    "arn:aws:s3:::*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "LogRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "LogRole"
          }
        ]
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "PolicyDocument": {
          "Id": "Policy1407019818030",
          "Statement": [
            {
              "Sid": "Stmt1407019922584",
              "Action": [
                "s3:GetObject",
                "s3:GetObjectTorrent",
                "s3:GetObjectVersion",
                "s3:GetObjectVersionTorrent"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "BucketName"
                    },
                    "/*"
                  ]
                ]
              },
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CfnUser",
                    "Arn"
                  ]
                }
              }
            }
          ]
        },
        "Bucket": {
          "Ref": "BucketName"
        }
      }
    },

    "JCSServerLaunchConfiguration" : {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": "BucketPolicy",
      "Metadata" : {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "apt": {
                "ruby": [],
                "ruby-dev": [],
                "make": [],
                "autoconf": [],
                "automake": []
              }
            },
            "sources": {
              "/var/chef-solo": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "RecipeURL"
                    }
                  ]
                ]
              }
            },
            "files": {
              "/etc/chef/solo.rb": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "log_level :info",
                      "log_location STDOUT",
                      "file_cache_path \"/var/chef-solo\"",
                      "cookbook_path \"/var/chef-solo/cookbooks\"",
                      "json_attribs \"/etc/chef/node.json\""
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/chef/node.json": {
                "content": {
                  "myrepmoney": {
                    "server_type": "jcs"
                    },
                  "mysql": {
                    "db_name": {
                      "Ref": "DBName"
                    },
                    "db_username": {
                      "Ref": "DBUsername"
                    },
                    "db_host": {"Fn::GetAtt" : ["DBInstance", "Endpoint.Address"]},
                    "db_port": {"Fn::GetAtt" : ["DBInstance", "Endpoint.Port"]},
                    "db_password": {
                      "Ref": "DBPassword"
                    },
                    "sql_file": {
                      "Ref": "DBFile"
                    },
                    "load_sql_file": {
                      "Ref": "DBFileLoad"
                    }
                  },
                  "website": {
                    "source_zip": "",
                    "load_source_zip": "N"
                  },
                  "aws": {
                    "log_group_name": {
                      "Ref": "EC2ServerLogGroup"
                    },
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "hosted_zone": {
                      "Ref": "DNSHostedZone" 
                    },
                    "domain_list": {
                      "Ref": "DNSDomainList"
                    },
                    "sqs_queue": { "Ref": "SQSQueueName" },
                    "sqs_url": { "Ref": "JCSQueue" },
                    "access_key": { 
                      "Ref": "HostKeys"
                    },
                    "secret_key": {
                      "Fn::GetAtt": [
                        "HostKeys",
                        "SecretAccessKey"
                      ]
                    }
                  },
                  "run_list": [
                    "recipe[MyRepMoney::default]"
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.JCSServerLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r JCSServerLaunchConfiguration ",
                      " --region     ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            }
          }
        },
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "accessKeyId": {
              "Ref": "HostKeys"
            },
            "secretKey": {
              "Fn::GetAtt": [
                "HostKeys",
                "SecretAccessKey"
              ]
            },
            "buckets": [
              {
                "Ref": "BucketName"
              }
            ]
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "JCSInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "JCSInstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "EC2ServerSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "LogRoleInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",

                "sudo apt-get -y update\n",
                "sudo apt-get -yf upgrade\n",
                "sudo apt-get -y install python-setuptools python-argparse cloud-init python-psutil python-pip\n",
                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

                "curl -L https://www.opscode.com/chef/install.sh | sudo bash\n",
                "sudo cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r JCSServerLaunchConfiguration ",
                " --access-key ",
                {
                  "Ref": "HostKeys"
                },
                " --secret-key ",
                {
                  "Fn::GetAtt": [
                    "HostKeys",
                    "SecretAccessKey"
                  ]
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "#sudo chown -R root:root /var/chef\n",
                "sudo find /var/chef-solo -type d -exec chmod 755 {} \\;\n",
                "sudo find /var/chef-solo -type f -exec chmod 644 {} \\;\n",
                "sudo chef-solo\n",
                "# Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata\n",
                "cfn-hup || error_exit 'Failed to start cfn-hup'\n",
                "sudo cfn-signal -e $? '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "JCSServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Version": "2009-05-15",
      "Properties": {
        "AvailabilityZones": [{ "Ref" : "PublicSubnetAZ" }],
        "LaunchConfigurationName": { "Ref": "JCSServerLaunchConfiguration" },
        "MinSize": "1",
        "MaxSize": "1",
        "Tags" : [{
          "Key"   : "Name",
          "Value" : { "Fn::Join"  : [ "-" , [ { "Ref" : "AWS::StackName" }, "JCS" ]]},
          "PropagateAtLaunch" : "true"
        }],
        "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet" }]
      }
    },

    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": [ "JCSServerAutoScalingGroup", "DataLoaderServerAutoScalingGroup" ],
      "Properties": {
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "600"
      }
    },

    "DataLoaderServerLaunchConfiguration" : {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": "BucketPolicy",
      "Metadata" : {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "apt": {
                "ruby": [],
                "ruby-dev": [],
                "make": [],
                "autoconf": [],
                "automake": []
              }
            },
            "sources": {
              "/var/chef-solo": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "RecipeURL"
                    }
                  ]
                ]
              }
            },
            "files": {
              "/etc/chef/solo.rb": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "log_level :info",
                      "log_location STDOUT",
                      "file_cache_path \"/var/chef-solo\"",
                      "cookbook_path \"/var/chef-solo/cookbooks\"",
                      "json_attribs \"/etc/chef/node.json\""
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/chef/node.json": {
                "content": {
                  "myrepmoney": {
                    "server_type": "dataloader"
                    },
                  "mysql": {
                    "db_name": {
                      "Ref": "DBName"
                    },
                    "db_username": {
                      "Ref": "DBUsername"
                    },
                    "db_host": {"Fn::GetAtt" : ["DBInstance", "Endpoint.Address"]},
                    "db_port": {"Fn::GetAtt" : ["DBInstance", "Endpoint.Port"]},
                    "db_password": {
                      "Ref": "DBPassword"
                    },
                    "sql_file": "",
                    "load_sql_file": "N"
                  },
                  "website": {
                    "source_zip": "",
                    "load_source_zip": "N"
                  },
                  "aws": {
                    "log_group_name": {
                      "Ref": "EC2ServerLogGroup"
                    },
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "hosted_zone": {
                      "Ref": "DNSHostedZone" 
                    },
                    "domain_list": {
                      "Ref": "DNSDomainList"
                    },
                    "sqs_queue": { "Ref": "SQSQueueName" },
                    "sqs_url": { "Ref": "JCSQueue" },
                    "access_key": { 
                      "Ref": "HostKeys"
                    },
                    "secret_key": {
                      "Fn::GetAtt": [
                        "HostKeys",
                        "SecretAccessKey"
                      ]
                    }
                  },
                  "run_list": [
                    "recipe[MyRepMoney::default]"
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.DataLoaderServerLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r DataLoaderServerLaunchConfiguration ",
                      " --region     ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            }
          }
        },
        "AWS::CloudFormation::Authentication": {
          "S3AccessCreds": {
            "type": "S3",
            "accessKeyId": {
              "Ref": "HostKeys"
            },
            "secretKey": {
              "Fn::GetAtt": [
                "HostKeys",
                "SecretAccessKey"
              ]
            },
            "buckets": [
              {
                "Ref": "BucketName"
              }
            ]
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "DataLoaderInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "DataLoaderInstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "EC2ServerSecurityGroup"
          },
          {
            "Ref": "EC2OutboundSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "LogRoleInstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
                "  exit 1\n",
                "}\n",

                "sudo apt-get -y update\n",
                "sudo apt-get -yf upgrade\n",
                "sudo apt-get -y install python-setuptools python-argparse cloud-init python-psutil python-pip\n",
                "sudo easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",

                "curl -L https://www.opscode.com/chef/install.sh | sudo bash\n",
                "sudo cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r DataLoaderServerLaunchConfiguration ",
                " --access-key ",
                {
                  "Ref": "HostKeys"
                },
                " --secret-key ",
                {
                  "Fn::GetAtt": [
                    "HostKeys",
                    "SecretAccessKey"
                  ]
                },
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "#sudo chown -R root:root /var/chef\n",
                "sudo find /var/chef-solo -type d -exec chmod 755 {} \\;\n",
                "sudo find /var/chef-solo -type f -exec chmod 644 {} \\;\n",
                "sudo chef-solo\n",
                "# Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata\n",
                "cfn-hup || error_exit 'Failed to start cfn-hup'\n",
                "sudo cfn-signal -e $? '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "DataLoaderServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Version": "2009-05-15",
      "Properties": {
        "AvailabilityZones": { "Ref" : "SubnetAZList" },
        "LaunchConfigurationName": { "Ref": "DataLoaderServerLaunchConfiguration" },
        "MinSize": "0",
        "MaxSize": "2",
        "Tags" : [{
          "Key"   : "Name",
          "Value" : { "Fn::Join"  : [ "-" , [ { "Ref" : "AWS::StackName" }, "dataloader" ]]},
          "PropagateAtLaunch" : "true"
        }],
        "VPCZoneIdentifier" : [{ "Ref" : "SubnetId1" }, { "Ref" : "SubnetId2" }]
      }
    },
    "DataLoaderServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "DataLoaderServerAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },

    "DataLoaderServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "DataLoaderServerAutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "JCSQueue" : {
      "Type" : "AWS::SQS::Queue",
      "Properties" : {
         "QueueName" : { "Ref": "SQSQueueName"},
         "ReceiveMessageWaitTimeSeconds": "10",
         "DelaySeconds": "0",
         "MaximumMessageSize": "262144",
         "MessageRetentionPeriod": "345600",
         "VisibilityTimeout": "30"
      }
    },

    "DBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": {
          "Ref": "DBName"
        },
        "Engine": "MySQL",
        "DBSubnetGroupName": {
          "Ref": "RDSDBSubnetGroup"
        },
        "MasterUsername": {
          "Ref": "DBUsername"
        },
        "DBInstanceClass": {
          "Ref": "DBClass"
        },
        "DBSecurityGroups": [
          {
            "Ref": "DBSecurityGroup"
          }
        ],
        "AllocatedStorage": {
          "Ref": "DBAllocatedStorage"
        },
        "MasterUserPassword": {
          "Ref": "DBPassword"
        }
      },
      "DeletionPolicy": "Snapshot"
    },
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "EC2VpcId": {
          "Ref": "VPCId"
        },
        "DBSecurityGroupIngress": {
          "EC2SecurityGroupId": {
            "Ref": "EC2ServerSecurityGroup"
          }
        },
        "GroupDescription": "Frontend Access"
      }
    },
    "RDSDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "This is the subnet group to use for our RDS database.",
        "SubnetIds": [
            { "Ref": "SubnetId1" }, 
            { "Ref": "SubnetId2" }
        ]        
      }
    },

    "EC2ServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "GroupDescription": "Enable SSH and MySQL access from EC2 to RDS",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "EC2OutboundSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPCId"
        },
        "GroupDescription": "Enable outbound FTP, HTTP, and HTTPS access",
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "20",
            "ToPort": "21",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },    
    "EC2ServerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },

    "BandwidthAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "The average volume of traffic is greater 3500 KB over 10 minutes",
        "MetricName": "testBytesTransferred",
        "Namespace": "test/BytesTransferred",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "3500",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "Unit": "Kilobytes",
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "JCSCPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if aggregate CPU too high ie. > 90% for 5 minutes",
        "Namespace": "AWS/EC2",
        "MetricName": "CPUUtilization",
        "Statistic": "Average",
        "Period": "300",
        "Threshold": "90",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "1",
        "AlarmActions": [
          {
            "Ref": "AlarmNotificationTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "JCSServerAutoScalingGroup"
            }
          }
        ]
      }
    },
    "QueueDepthHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if queue depth grows beyond 10 messages",
        "Namespace": "AWS/SQS",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Dimensions": [{
          "Name": "QueueName",
          "Value" : { "Fn::GetAtt" : ["JCSQueue", "QueueName"] }
        }],
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "1",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "AlarmActions": [{
          "Ref": "AlarmNotificationTopic"
        },{
          "Ref": "DataLoaderServerScaleUpPolicy"
        }],
        "InsufficientDataActions": [{
          "Ref": "AlarmNotificationTopic"
        }]
      }      
    },
    "QueueDepthLowAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alarm if queue depth grows beyond 10 messages",
        "Namespace": "AWS/SQS",
        "MetricName": "ApproximateNumberOfMessagesVisible",
        "Dimensions": [{
          "Name": "QueueName",
          "Value" : { "Fn::GetAtt" : ["JCSQueue", "QueueName"] }
        }],
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "1",
        "ComparisonOperator": "LessThanThreshold",
        "AlarmActions": [{
          "Ref": "AlarmNotificationTopic"
        },{
          "Ref": "DataLoaderServerScaleDownPolicy"
        }],
        "InsufficientDataActions": [{
          "Ref": "AlarmNotificationTopic"
        }]
      }      
    },    
    "AlarmNotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "OperatorEmail"
            },
            "Protocol": "email"
          }
        ]
      }
    }
  },
  "Outputs": {
    "JDBCConnectionString": {
      "Description" : "JDBC connection string for database",
      "Value" : { "Fn::Join": [ "", [ "jdbc:mysql://",
                                      { "Fn::GetAtt": [ "DBInstance", "Endpoint.Address" ] },
                                      ":",
                                      { "Fn::GetAtt": [ "DBInstance", "Endpoint.Port" ] },
                                      "/",
                                      { "Ref": "DBName" }]]}
    },
    "JCSQueueUrl": {
      "Description": "Url of JCS SQS Queue",
      "Value" : { "Ref" : "JCSQueue" }
    }
  }
}